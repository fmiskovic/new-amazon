// Code generated by mockery v2.42.2. DO NOT EDIT.

package repositories

import (
	context "context"

	entities "github.com/fmiskovic/new-amz/internal/core/entities"
	mock "github.com/stretchr/testify/mock"
)

// ItemRepositoryMock is an autogenerated mock type for the ItemRepository type
type ItemRepositoryMock[ID interface{}] struct {
	mock.Mock
}

type ItemRepositoryMock_Expecter[ID interface{}] struct {
	mock *mock.Mock
}

func (_m *ItemRepositoryMock[ID]) EXPECT() *ItemRepositoryMock_Expecter[ID] {
	return &ItemRepositoryMock_Expecter[ID]{mock: &_m.Mock}
}

// GetById provides a mock function with given fields: ctx, id
func (_m *ItemRepositoryMock[ID]) GetById(ctx context.Context, id ID) (entities.Item, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entities.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ID) (entities.Item, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ID) entities.Item); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entities.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ItemRepositoryMock_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type ItemRepositoryMock_GetById_Call[ID interface{}] struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id ID
func (_e *ItemRepositoryMock_Expecter[ID]) GetById(ctx interface{}, id interface{}) *ItemRepositoryMock_GetById_Call[ID] {
	return &ItemRepositoryMock_GetById_Call[ID]{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *ItemRepositoryMock_GetById_Call[ID]) Run(run func(ctx context.Context, id ID)) *ItemRepositoryMock_GetById_Call[ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ID))
	})
	return _c
}

func (_c *ItemRepositoryMock_GetById_Call[ID]) Return(_a0 entities.Item, _a1 error) *ItemRepositoryMock_GetById_Call[ID] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ItemRepositoryMock_GetById_Call[ID]) RunAndReturn(run func(context.Context, ID) (entities.Item, error)) *ItemRepositoryMock_GetById_Call[ID] {
	_c.Call.Return(run)
	return _c
}

// GetPage provides a mock function with given fields: ctx, p
func (_m *ItemRepositoryMock[ID]) GetPage(ctx context.Context, p entities.Pageable) (entities.Page[entities.Item], error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for GetPage")
	}

	var r0 entities.Page[entities.Item]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Pageable) (entities.Page[entities.Item], error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Pageable) entities.Page[entities.Item]); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(entities.Page[entities.Item])
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Pageable) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ItemRepositoryMock_GetPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPage'
type ItemRepositoryMock_GetPage_Call[ID interface{}] struct {
	*mock.Call
}

// GetPage is a helper method to define mock.On call
//   - ctx context.Context
//   - p entities.Pageable
func (_e *ItemRepositoryMock_Expecter[ID]) GetPage(ctx interface{}, p interface{}) *ItemRepositoryMock_GetPage_Call[ID] {
	return &ItemRepositoryMock_GetPage_Call[ID]{Call: _e.mock.On("GetPage", ctx, p)}
}

func (_c *ItemRepositoryMock_GetPage_Call[ID]) Run(run func(ctx context.Context, p entities.Pageable)) *ItemRepositoryMock_GetPage_Call[ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Pageable))
	})
	return _c
}

func (_c *ItemRepositoryMock_GetPage_Call[ID]) Return(_a0 entities.Page[entities.Item], _a1 error) *ItemRepositoryMock_GetPage_Call[ID] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ItemRepositoryMock_GetPage_Call[ID]) RunAndReturn(run func(context.Context, entities.Pageable) (entities.Page[entities.Item], error)) *ItemRepositoryMock_GetPage_Call[ID] {
	_c.Call.Return(run)
	return _c
}

// NewItemRepositoryMock creates a new instance of ItemRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItemRepositoryMock[ID interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *ItemRepositoryMock[ID] {
	mock := &ItemRepositoryMock[ID]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
