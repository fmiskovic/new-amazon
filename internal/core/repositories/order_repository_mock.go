// Code generated by mockery v2.42.2. DO NOT EDIT.

package repositories

import (
	context "context"

	entities "github.com/fmiskovic/new-amz/internal/core/entities"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepositoryMock is an autogenerated mock type for the OrderRepository type
type OrderRepositoryMock[ID interface{}] struct {
	mock.Mock
}

type OrderRepositoryMock_Expecter[ID interface{}] struct {
	mock *mock.Mock
}

func (_m *OrderRepositoryMock[ID]) EXPECT() *OrderRepositoryMock_Expecter[ID] {
	return &OrderRepositoryMock_Expecter[ID]{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, order
func (_m *OrderRepositoryMock[ID]) Create(ctx context.Context, order *entities.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OrderRepositoryMock_Create_Call[ID interface{}] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - order *entities.Order
func (_e *OrderRepositoryMock_Expecter[ID]) Create(ctx interface{}, order interface{}) *OrderRepositoryMock_Create_Call[ID] {
	return &OrderRepositoryMock_Create_Call[ID]{Call: _e.mock.On("Create", ctx, order)}
}

func (_c *OrderRepositoryMock_Create_Call[ID]) Run(run func(ctx context.Context, order *entities.Order)) *OrderRepositoryMock_Create_Call[ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Order))
	})
	return _c
}

func (_c *OrderRepositoryMock_Create_Call[ID]) Return(_a0 error) *OrderRepositoryMock_Create_Call[ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepositoryMock_Create_Call[ID]) RunAndReturn(run func(context.Context, *entities.Order) error) *OrderRepositoryMock_Create_Call[ID] {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *OrderRepositoryMock[ID]) GetById(ctx context.Context, id ID) (entities.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entities.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ID) (entities.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ID) entities.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entities.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryMock_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type OrderRepositoryMock_GetById_Call[ID interface{}] struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id ID
func (_e *OrderRepositoryMock_Expecter[ID]) GetById(ctx interface{}, id interface{}) *OrderRepositoryMock_GetById_Call[ID] {
	return &OrderRepositoryMock_GetById_Call[ID]{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *OrderRepositoryMock_GetById_Call[ID]) Run(run func(ctx context.Context, id ID)) *OrderRepositoryMock_GetById_Call[ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ID))
	})
	return _c
}

func (_c *OrderRepositoryMock_GetById_Call[ID]) Return(_a0 entities.Order, _a1 error) *OrderRepositoryMock_GetById_Call[ID] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepositoryMock_GetById_Call[ID]) RunAndReturn(run func(context.Context, ID) (entities.Order, error)) *OrderRepositoryMock_GetById_Call[ID] {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, accountId, pageRequest
func (_m *OrderRepositoryMock[ID]) Search(ctx context.Context, accountId ID, pageRequest entities.Pageable) (entities.Page[entities.Order], error) {
	ret := _m.Called(ctx, accountId, pageRequest)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 entities.Page[entities.Order]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ID, entities.Pageable) (entities.Page[entities.Order], error)); ok {
		return rf(ctx, accountId, pageRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ID, entities.Pageable) entities.Page[entities.Order]); ok {
		r0 = rf(ctx, accountId, pageRequest)
	} else {
		r0 = ret.Get(0).(entities.Page[entities.Order])
	}

	if rf, ok := ret.Get(1).(func(context.Context, ID, entities.Pageable) error); ok {
		r1 = rf(ctx, accountId, pageRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryMock_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type OrderRepositoryMock_Search_Call[ID interface{}] struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - accountId ID
//   - pageRequest entities.Pageable
func (_e *OrderRepositoryMock_Expecter[ID]) Search(ctx interface{}, accountId interface{}, pageRequest interface{}) *OrderRepositoryMock_Search_Call[ID] {
	return &OrderRepositoryMock_Search_Call[ID]{Call: _e.mock.On("Search", ctx, accountId, pageRequest)}
}

func (_c *OrderRepositoryMock_Search_Call[ID]) Run(run func(ctx context.Context, accountId ID, pageRequest entities.Pageable)) *OrderRepositoryMock_Search_Call[ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ID), args[2].(entities.Pageable))
	})
	return _c
}

func (_c *OrderRepositoryMock_Search_Call[ID]) Return(_a0 entities.Page[entities.Order], _a1 error) *OrderRepositoryMock_Search_Call[ID] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepositoryMock_Search_Call[ID]) RunAndReturn(run func(context.Context, ID, entities.Pageable) (entities.Page[entities.Order], error)) *OrderRepositoryMock_Search_Call[ID] {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepositoryMock creates a new instance of OrderRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepositoryMock[ID interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepositoryMock[ID] {
	mock := &OrderRepositoryMock[ID]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
